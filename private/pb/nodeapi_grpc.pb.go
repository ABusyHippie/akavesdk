// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: nodeapi.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NodeAPI_BucketCreate_FullMethodName         = "/nodeapi.NodeAPI/BucketCreate"
	NodeAPI_BucketView_FullMethodName           = "/nodeapi.NodeAPI/BucketView"
	NodeAPI_BucketList_FullMethodName           = "/nodeapi.NodeAPI/BucketList"
	NodeAPI_BucketDelete_FullMethodName         = "/nodeapi.NodeAPI/BucketDelete"
	NodeAPI_FileUploadCreate_FullMethodName     = "/nodeapi.NodeAPI/FileUploadCreate"
	NodeAPI_FileUpload_FullMethodName           = "/nodeapi.NodeAPI/FileUpload"
	NodeAPI_FileUploadChunk_FullMethodName      = "/nodeapi.NodeAPI/FileUploadChunk"
	NodeAPI_FileView_FullMethodName             = "/nodeapi.NodeAPI/FileView"
	NodeAPI_FileDownloadCreate_FullMethodName   = "/nodeapi.NodeAPI/FileDownloadCreate"
	NodeAPI_FileDownloadCreateV2_FullMethodName = "/nodeapi.NodeAPI/FileDownloadCreateV2"
	NodeAPI_FileDownload_FullMethodName         = "/nodeapi.NodeAPI/FileDownload"
	NodeAPI_FileDownloadChunk_FullMethodName    = "/nodeapi.NodeAPI/FileDownloadChunk"
	NodeAPI_FileList_FullMethodName             = "/nodeapi.NodeAPI/FileList"
	NodeAPI_FileKeys_FullMethodName             = "/nodeapi.NodeAPI/FileKeys"
	NodeAPI_FileUpdateCreate_FullMethodName     = "/nodeapi.NodeAPI/FileUpdateCreate"
	NodeAPI_FileDelete_FullMethodName           = "/nodeapi.NodeAPI/FileDelete"
)

// NodeAPIClient is the client API for NodeAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeAPIClient interface {
	// Bucket APIs.
	BucketCreate(ctx context.Context, in *BucketCreateRequest, opts ...grpc.CallOption) (*BucketCreateResponse, error)
	BucketView(ctx context.Context, in *BucketViewRequest, opts ...grpc.CallOption) (*BucketViewResponse, error)
	BucketList(ctx context.Context, in *BucketListRequest, opts ...grpc.CallOption) (*BucketListResponse, error)
	BucketDelete(ctx context.Context, in *BucketDeleteRequest, opts ...grpc.CallOption) (*BucketDeleteResponse, error)
	// File APIs.
	FileUploadCreate(ctx context.Context, in *FileUploadCreateRequest, opts ...grpc.CallOption) (*FileUploadCreateResponse, error)
	FileUpload(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadResponse, error)
	FileUploadChunk(ctx context.Context, opts ...grpc.CallOption) (NodeAPI_FileUploadChunkClient, error)
	FileView(ctx context.Context, in *FileViewRequest, opts ...grpc.CallOption) (*FileViewResponse, error)
	FileDownloadCreate(ctx context.Context, in *FileDownloadCreateRequest, opts ...grpc.CallOption) (*FileDownloadCreateResponse, error)
	FileDownloadCreateV2(ctx context.Context, in *FileDownloadCreateV2Request, opts ...grpc.CallOption) (*FileDownloadCreateV2Response, error)
	FileDownload(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (*FileDownloadResponse, error)
	FileDownloadChunk(ctx context.Context, in *FileDownloadChunkRequest, opts ...grpc.CallOption) (NodeAPI_FileDownloadChunkClient, error)
	FileList(ctx context.Context, in *FileListRequest, opts ...grpc.CallOption) (*FileListResponse, error)
	FileKeys(ctx context.Context, in *FileKeysRequest, opts ...grpc.CallOption) (*FileKeysResponse, error)
	FileUpdateCreate(ctx context.Context, in *FileUpdateCreateRequest, opts ...grpc.CallOption) (*FileUpdateCreateResponse, error)
	FileDelete(ctx context.Context, in *FileDeleteRequest, opts ...grpc.CallOption) (*FileDeleteResponse, error)
}

type nodeAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeAPIClient(cc grpc.ClientConnInterface) NodeAPIClient {
	return &nodeAPIClient{cc}
}

func (c *nodeAPIClient) BucketCreate(ctx context.Context, in *BucketCreateRequest, opts ...grpc.CallOption) (*BucketCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BucketCreateResponse)
	err := c.cc.Invoke(ctx, NodeAPI_BucketCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) BucketView(ctx context.Context, in *BucketViewRequest, opts ...grpc.CallOption) (*BucketViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BucketViewResponse)
	err := c.cc.Invoke(ctx, NodeAPI_BucketView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) BucketList(ctx context.Context, in *BucketListRequest, opts ...grpc.CallOption) (*BucketListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BucketListResponse)
	err := c.cc.Invoke(ctx, NodeAPI_BucketList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) BucketDelete(ctx context.Context, in *BucketDeleteRequest, opts ...grpc.CallOption) (*BucketDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BucketDeleteResponse)
	err := c.cc.Invoke(ctx, NodeAPI_BucketDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) FileUploadCreate(ctx context.Context, in *FileUploadCreateRequest, opts ...grpc.CallOption) (*FileUploadCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileUploadCreateResponse)
	err := c.cc.Invoke(ctx, NodeAPI_FileUploadCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) FileUpload(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileUploadResponse)
	err := c.cc.Invoke(ctx, NodeAPI_FileUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) FileUploadChunk(ctx context.Context, opts ...grpc.CallOption) (NodeAPI_FileUploadChunkClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodeAPI_ServiceDesc.Streams[0], NodeAPI_FileUploadChunk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &nodeAPIFileUploadChunkClient{ClientStream: stream}
	return x, nil
}

type NodeAPI_FileUploadChunkClient interface {
	Send(*FileChunkData) error
	CloseAndRecv() (*FileUploadChunkResponse, error)
	grpc.ClientStream
}

type nodeAPIFileUploadChunkClient struct {
	grpc.ClientStream
}

func (x *nodeAPIFileUploadChunkClient) Send(m *FileChunkData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeAPIFileUploadChunkClient) CloseAndRecv() (*FileUploadChunkResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeAPIClient) FileView(ctx context.Context, in *FileViewRequest, opts ...grpc.CallOption) (*FileViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileViewResponse)
	err := c.cc.Invoke(ctx, NodeAPI_FileView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) FileDownloadCreate(ctx context.Context, in *FileDownloadCreateRequest, opts ...grpc.CallOption) (*FileDownloadCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileDownloadCreateResponse)
	err := c.cc.Invoke(ctx, NodeAPI_FileDownloadCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) FileDownloadCreateV2(ctx context.Context, in *FileDownloadCreateV2Request, opts ...grpc.CallOption) (*FileDownloadCreateV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileDownloadCreateV2Response)
	err := c.cc.Invoke(ctx, NodeAPI_FileDownloadCreateV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) FileDownload(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (*FileDownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileDownloadResponse)
	err := c.cc.Invoke(ctx, NodeAPI_FileDownload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) FileDownloadChunk(ctx context.Context, in *FileDownloadChunkRequest, opts ...grpc.CallOption) (NodeAPI_FileDownloadChunkClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodeAPI_ServiceDesc.Streams[1], NodeAPI_FileDownloadChunk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &nodeAPIFileDownloadChunkClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeAPI_FileDownloadChunkClient interface {
	Recv() (*FileChunkData, error)
	grpc.ClientStream
}

type nodeAPIFileDownloadChunkClient struct {
	grpc.ClientStream
}

func (x *nodeAPIFileDownloadChunkClient) Recv() (*FileChunkData, error) {
	m := new(FileChunkData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeAPIClient) FileList(ctx context.Context, in *FileListRequest, opts ...grpc.CallOption) (*FileListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileListResponse)
	err := c.cc.Invoke(ctx, NodeAPI_FileList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) FileKeys(ctx context.Context, in *FileKeysRequest, opts ...grpc.CallOption) (*FileKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileKeysResponse)
	err := c.cc.Invoke(ctx, NodeAPI_FileKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) FileUpdateCreate(ctx context.Context, in *FileUpdateCreateRequest, opts ...grpc.CallOption) (*FileUpdateCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileUpdateCreateResponse)
	err := c.cc.Invoke(ctx, NodeAPI_FileUpdateCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) FileDelete(ctx context.Context, in *FileDeleteRequest, opts ...grpc.CallOption) (*FileDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileDeleteResponse)
	err := c.cc.Invoke(ctx, NodeAPI_FileDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeAPIServer is the server API for NodeAPI service.
// All implementations must embed UnimplementedNodeAPIServer
// for forward compatibility
type NodeAPIServer interface {
	// Bucket APIs.
	BucketCreate(context.Context, *BucketCreateRequest) (*BucketCreateResponse, error)
	BucketView(context.Context, *BucketViewRequest) (*BucketViewResponse, error)
	BucketList(context.Context, *BucketListRequest) (*BucketListResponse, error)
	BucketDelete(context.Context, *BucketDeleteRequest) (*BucketDeleteResponse, error)
	// File APIs.
	FileUploadCreate(context.Context, *FileUploadCreateRequest) (*FileUploadCreateResponse, error)
	FileUpload(context.Context, *FileUploadRequest) (*FileUploadResponse, error)
	FileUploadChunk(NodeAPI_FileUploadChunkServer) error
	FileView(context.Context, *FileViewRequest) (*FileViewResponse, error)
	FileDownloadCreate(context.Context, *FileDownloadCreateRequest) (*FileDownloadCreateResponse, error)
	FileDownloadCreateV2(context.Context, *FileDownloadCreateV2Request) (*FileDownloadCreateV2Response, error)
	FileDownload(context.Context, *FileDownloadRequest) (*FileDownloadResponse, error)
	FileDownloadChunk(*FileDownloadChunkRequest, NodeAPI_FileDownloadChunkServer) error
	FileList(context.Context, *FileListRequest) (*FileListResponse, error)
	FileKeys(context.Context, *FileKeysRequest) (*FileKeysResponse, error)
	FileUpdateCreate(context.Context, *FileUpdateCreateRequest) (*FileUpdateCreateResponse, error)
	FileDelete(context.Context, *FileDeleteRequest) (*FileDeleteResponse, error)
	mustEmbedUnimplementedNodeAPIServer()
}

// UnimplementedNodeAPIServer must be embedded to have forward compatible implementations.
type UnimplementedNodeAPIServer struct {
}

func (UnimplementedNodeAPIServer) BucketCreate(context.Context, *BucketCreateRequest) (*BucketCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketCreate not implemented")
}
func (UnimplementedNodeAPIServer) BucketView(context.Context, *BucketViewRequest) (*BucketViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketView not implemented")
}
func (UnimplementedNodeAPIServer) BucketList(context.Context, *BucketListRequest) (*BucketListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketList not implemented")
}
func (UnimplementedNodeAPIServer) BucketDelete(context.Context, *BucketDeleteRequest) (*BucketDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketDelete not implemented")
}
func (UnimplementedNodeAPIServer) FileUploadCreate(context.Context, *FileUploadCreateRequest) (*FileUploadCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUploadCreate not implemented")
}
func (UnimplementedNodeAPIServer) FileUpload(context.Context, *FileUploadRequest) (*FileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (UnimplementedNodeAPIServer) FileUploadChunk(NodeAPI_FileUploadChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method FileUploadChunk not implemented")
}
func (UnimplementedNodeAPIServer) FileView(context.Context, *FileViewRequest) (*FileViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileView not implemented")
}
func (UnimplementedNodeAPIServer) FileDownloadCreate(context.Context, *FileDownloadCreateRequest) (*FileDownloadCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDownloadCreate not implemented")
}
func (UnimplementedNodeAPIServer) FileDownloadCreateV2(context.Context, *FileDownloadCreateV2Request) (*FileDownloadCreateV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDownloadCreateV2 not implemented")
}
func (UnimplementedNodeAPIServer) FileDownload(context.Context, *FileDownloadRequest) (*FileDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDownload not implemented")
}
func (UnimplementedNodeAPIServer) FileDownloadChunk(*FileDownloadChunkRequest, NodeAPI_FileDownloadChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method FileDownloadChunk not implemented")
}
func (UnimplementedNodeAPIServer) FileList(context.Context, *FileListRequest) (*FileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileList not implemented")
}
func (UnimplementedNodeAPIServer) FileKeys(context.Context, *FileKeysRequest) (*FileKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileKeys not implemented")
}
func (UnimplementedNodeAPIServer) FileUpdateCreate(context.Context, *FileUpdateCreateRequest) (*FileUpdateCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUpdateCreate not implemented")
}
func (UnimplementedNodeAPIServer) FileDelete(context.Context, *FileDeleteRequest) (*FileDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDelete not implemented")
}
func (UnimplementedNodeAPIServer) mustEmbedUnimplementedNodeAPIServer() {}

// UnsafeNodeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeAPIServer will
// result in compilation errors.
type UnsafeNodeAPIServer interface {
	mustEmbedUnimplementedNodeAPIServer()
}

func RegisterNodeAPIServer(s grpc.ServiceRegistrar, srv NodeAPIServer) {
	s.RegisterService(&NodeAPI_ServiceDesc, srv)
}

func _NodeAPI_BucketCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).BucketCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_BucketCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).BucketCreate(ctx, req.(*BucketCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_BucketView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).BucketView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_BucketView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).BucketView(ctx, req.(*BucketViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_BucketList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).BucketList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_BucketList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).BucketList(ctx, req.(*BucketListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_BucketDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).BucketDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_BucketDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).BucketDelete(ctx, req.(*BucketDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_FileUploadCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).FileUploadCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_FileUploadCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).FileUploadCreate(ctx, req.(*FileUploadCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_FileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).FileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_FileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).FileUpload(ctx, req.(*FileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_FileUploadChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeAPIServer).FileUploadChunk(&nodeAPIFileUploadChunkServer{ServerStream: stream})
}

type NodeAPI_FileUploadChunkServer interface {
	SendAndClose(*FileUploadChunkResponse) error
	Recv() (*FileChunkData, error)
	grpc.ServerStream
}

type nodeAPIFileUploadChunkServer struct {
	grpc.ServerStream
}

func (x *nodeAPIFileUploadChunkServer) SendAndClose(m *FileUploadChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeAPIFileUploadChunkServer) Recv() (*FileChunkData, error) {
	m := new(FileChunkData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NodeAPI_FileView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).FileView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_FileView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).FileView(ctx, req.(*FileViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_FileDownloadCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDownloadCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).FileDownloadCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_FileDownloadCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).FileDownloadCreate(ctx, req.(*FileDownloadCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_FileDownloadCreateV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDownloadCreateV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).FileDownloadCreateV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_FileDownloadCreateV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).FileDownloadCreateV2(ctx, req.(*FileDownloadCreateV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_FileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).FileDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_FileDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).FileDownload(ctx, req.(*FileDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_FileDownloadChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileDownloadChunkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeAPIServer).FileDownloadChunk(m, &nodeAPIFileDownloadChunkServer{ServerStream: stream})
}

type NodeAPI_FileDownloadChunkServer interface {
	Send(*FileChunkData) error
	grpc.ServerStream
}

type nodeAPIFileDownloadChunkServer struct {
	grpc.ServerStream
}

func (x *nodeAPIFileDownloadChunkServer) Send(m *FileChunkData) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeAPI_FileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).FileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_FileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).FileList(ctx, req.(*FileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_FileKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).FileKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_FileKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).FileKeys(ctx, req.(*FileKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_FileUpdateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUpdateCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).FileUpdateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_FileUpdateCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).FileUpdateCreate(ctx, req.(*FileUpdateCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_FileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).FileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAPI_FileDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).FileDelete(ctx, req.(*FileDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeAPI_ServiceDesc is the grpc.ServiceDesc for NodeAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodeapi.NodeAPI",
	HandlerType: (*NodeAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BucketCreate",
			Handler:    _NodeAPI_BucketCreate_Handler,
		},
		{
			MethodName: "BucketView",
			Handler:    _NodeAPI_BucketView_Handler,
		},
		{
			MethodName: "BucketList",
			Handler:    _NodeAPI_BucketList_Handler,
		},
		{
			MethodName: "BucketDelete",
			Handler:    _NodeAPI_BucketDelete_Handler,
		},
		{
			MethodName: "FileUploadCreate",
			Handler:    _NodeAPI_FileUploadCreate_Handler,
		},
		{
			MethodName: "FileUpload",
			Handler:    _NodeAPI_FileUpload_Handler,
		},
		{
			MethodName: "FileView",
			Handler:    _NodeAPI_FileView_Handler,
		},
		{
			MethodName: "FileDownloadCreate",
			Handler:    _NodeAPI_FileDownloadCreate_Handler,
		},
		{
			MethodName: "FileDownloadCreateV2",
			Handler:    _NodeAPI_FileDownloadCreateV2_Handler,
		},
		{
			MethodName: "FileDownload",
			Handler:    _NodeAPI_FileDownload_Handler,
		},
		{
			MethodName: "FileList",
			Handler:    _NodeAPI_FileList_Handler,
		},
		{
			MethodName: "FileKeys",
			Handler:    _NodeAPI_FileKeys_Handler,
		},
		{
			MethodName: "FileUpdateCreate",
			Handler:    _NodeAPI_FileUpdateCreate_Handler,
		},
		{
			MethodName: "FileDelete",
			Handler:    _NodeAPI_FileDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileUploadChunk",
			Handler:       _NodeAPI_FileUploadChunk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FileDownloadChunk",
			Handler:       _NodeAPI_FileDownloadChunk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nodeapi.proto",
}
